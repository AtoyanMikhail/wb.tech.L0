version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    env_file:
      - docker.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    env_file:
      - docker.env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    restart: always
    env_file:
      - docker.env
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: always
    ports:
      - 9092:9092
    depends_on:
      zookeeper:
        condition: service_healthy
    env_file:
      - docker.env
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - docker.env
    command: >
      sh -c "
        echo 'Waiting for Kafka to be ready...'
        kafka-topics --bootstrap-server kafka:9092 --list
        echo 'Creating orders topic...'
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic orders --partitions 1 --replication-factor 1
        echo 'Topic orders created successfully!'
      "
    restart: "no"

  app:
    build: .
    container_name: l0-app
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "8081:8081"
    environment:
      - POSTGRES_DB=orders
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=orders
      - KAFKA_GROUP_ID=orders-service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=
      - REDIS_PREFIX=order
      - REDIS_TTL=3600
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data: 